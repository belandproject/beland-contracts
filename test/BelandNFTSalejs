const { assert, use } = require("chai");

const BelandNFTFactory = artifacts.require("./BelandNFTFactory.sol");
const BelandNFT = artifacts.require("./BelandNFT.sol");
const expectRevert = require("@openzeppelin/test-helpers/src/expectRevert");
const BelandNFTSale = artifacts.require("./BelandNFTSale.sol");
const TestReferral = artifacts.require("./test/TestReferral.sol");
const TestErc20 = artifacts.require("./TestErc20.sol");

contract(
  "BelandNFTSale",
  ([owner, user, treasury, nftTreasury, referrer]) => {
    beforeEach(async () => {
      this.usdt = await TestErc20.new();
      await this.usdt.mint(3000);

      this.factory = await BelandNFTFactory.new(treasury, this.usdt.address, 100);
      await this.usdt.approve(this.factory.address, 3000);
      await this.factory.setBaseURI("beland.io/");
      await this.factory.create("ABC", "ABC", [[1, '1', 100, nftTreasury]], '');

      this.usdt = await TestErc20.new();
      this.nft = await BelandNFT.at(await this.factory.collections(0));
      this.referral = await TestReferral.new();
      this.sale = await BelandNFTSale.new(
        this.factory.address,
        treasury,
        this.referral.address,
        this.usdt.address,
      );
      await this.usdt.mint(3000, { from: user });
      await this.usdt.approve(this.presale.address, 3000, { from: user });
      await this.nft.setMinter(this.presale.address, true);
      await this.nft.setApproved(true);
    });

    it("Should buy", async () => {
      await this.sale.buy(this.nft.address, 1, 2, referrer, { from: user });

      assert.equal(await this.nft.ownerOf(1), user);
      assert.equal(await this.nft.ownerOf(2), user);
      assert.equal(await this.usdt.balanceOf(user), 1000);
      assert.equal(await this.usdt.balanceOf(treasury), 20); // 1%
      assert.equal(await this.usdt.balanceOf(referrer), 20); // 1%
      assert.equal(await this.usdt.balanceOf(nftTreasury), 1960); // 98%
    });

    it("should not buy", async () => {
      await expectRevert(
        this.sale.buy(this.nft.address, 1, 3, referrer, { from: user }),
        "BelandNFT: max supply"
      );

      await expectRevert(
        this.sale.buy(this.nft.address, 1, 3, referrer, { from: user }),
        "BelandNFTPresale: presale not found"
      );
    });
  }
);
